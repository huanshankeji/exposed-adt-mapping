public abstract interface class com/huanshankeji/exposed/datamapping/DataMapper : com/huanshankeji/exposed/datamapping/DataQueryMapper, com/huanshankeji/exposed/datamapping/NullableDataMapper, com/huanshankeji/exposed/datamapping/SimpleDataMapper {
}

public final class com/huanshankeji/exposed/datamapping/DataMapperInterfacesKt {
	public static final fun updateBuilderSetter (Lcom/huanshankeji/exposed/datamapping/DataUpdateMapper;Ljava/lang/Object;)Lkotlin/jvm/functions/Function2;
}

public abstract interface class com/huanshankeji/exposed/datamapping/DataQueryMapper : com/huanshankeji/exposed/datamapping/NullableDataQueryMapper {
}

public abstract interface class com/huanshankeji/exposed/datamapping/DataUpdateMapper : com/huanshankeji/exposed/datamapping/NullableDataUpdateMapper {
}

public abstract interface class com/huanshankeji/exposed/datamapping/NullableDataMapper : com/huanshankeji/exposed/datamapping/NullableDataQueryMapper, com/huanshankeji/exposed/datamapping/NullableDataUpdateMapper {
}

public abstract interface class com/huanshankeji/exposed/datamapping/NullableDataQueryMapper : com/huanshankeji/exposed/datamapping/SimpleNullableDataQueryMapper {
	public abstract fun getNeededColumns ()Ljava/util/List;
}

public abstract interface class com/huanshankeji/exposed/datamapping/NullableDataUpdateMapper {
	public abstract fun setUpdateBuilder (Ljava/lang/Object;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
}

public abstract interface class com/huanshankeji/exposed/datamapping/SimpleDataMapper : com/huanshankeji/exposed/datamapping/DataUpdateMapper, com/huanshankeji/exposed/datamapping/SimpleDataQueryMapper {
}

public abstract interface class com/huanshankeji/exposed/datamapping/SimpleDataQueryMapper : com/huanshankeji/exposed/datamapping/SimpleNullableDataQueryMapper {
}

public abstract interface class com/huanshankeji/exposed/datamapping/SimpleNullableDataQueryMapper {
	public abstract fun resultRowToData (Lorg/jetbrains/exposed/sql/ResultRow;)Ljava/lang/Object;
}

public final class com/huanshankeji/exposed/datamapping/TableKt {
	public static final fun selectWithMapper (Lorg/jetbrains/exposed/sql/ColumnSet;Lcom/huanshankeji/exposed/datamapping/NullableDataQueryMapper;Lorg/jetbrains/exposed/sql/Op;)Lkotlin/sequences/Sequence;
	public static synthetic fun selectWithMapper$default (Lorg/jetbrains/exposed/sql/ColumnSet;Lcom/huanshankeji/exposed/datamapping/NullableDataQueryMapper;Lorg/jetbrains/exposed/sql/Op;ILjava/lang/Object;)Lkotlin/sequences/Sequence;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ClassPropertyMappingKt {
	public static final fun forEachColumn (Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping;Lkotlin/jvm/functions/Function1;)V
	public static final fun forEachColumn (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public static final fun getColumnByPropertyNameMap (Ljava/util/List;Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;)Ljava/util/Map;
	public static synthetic fun getColumnByPropertyNameMap$default (Ljava/util/List;Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;ILjava/lang/Object;)Ljava/util/Map;
	public static final fun getColumnSet (Ljava/util/List;)Ljava/util/Set;
	public static final fun getColumnsWithPropertyNamesWithoutTypeParameter (Lorg/jetbrains/exposed/sql/Table;Lkotlin/reflect/KClass;)Lkotlin/sequences/Sequence;
	public static synthetic fun getColumnsWithPropertyNamesWithoutTypeParameter$default (Lorg/jetbrains/exposed/sql/Table;Lkotlin/reflect/KClass;ILjava/lang/Object;)Lkotlin/sequences/Sequence;
	public static final fun getDefaultClassPropertyColumnMappings (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeClass;Ljava/util/List;Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;Ljava/util/Map;Ljava/util/List;)Ljava/util/List;
	public static synthetic fun getDefaultClassPropertyColumnMappings$default (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeClass;Ljava/util/List;Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;Ljava/util/Map;Ljava/util/List;ILjava/lang/Object;)Ljava/util/List;
	public static final fun getDefaultNotNullExposedSqlPrimitiveClasses ()Ljava/util/List;
	public static final fun isExposedSqlPrimitiveType (Lkotlin/reflect/KClass;)Z
	public static final fun isExposedSqlPrimitiveType (Lkotlin/reflect/KType;)Z
	public static final fun setUpdateBuilder (Ljava/util/List;Ljava/lang/Object;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
	public static final fun setUpdateBuilderColumnsToNulls (Ljava/util/List;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
	public static final fun setUpdateBuilderColumnsToNullsWithMappings (Ljava/util/List;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ColumnWithPropertyName {
	public fun <init> (Ljava/lang/String;Lorg/jetbrains/exposed/sql/Column;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Lorg/jetbrains/exposed/sql/Column;
	public final fun copy (Ljava/lang/String;Lorg/jetbrains/exposed/sql/Column;)Lcom/huanshankeji/exposed/datamapping/classproperty/ColumnWithPropertyName;
	public static synthetic fun copy$default (Lcom/huanshankeji/exposed/datamapping/classproperty/ColumnWithPropertyName;Ljava/lang/String;Lorg/jetbrains/exposed/sql/Column;ILjava/lang/Object;)Lcom/huanshankeji/exposed/datamapping/classproperty/ColumnWithPropertyName;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getColumn ()Lorg/jetbrains/exposed/sql/Column;
	public final fun getPropertyName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames : java/lang/Enum {
	public static final field CHOOSE_FIRST Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;
	public static final field THROW Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;
	public static fun values ()[Lcom/huanshankeji/exposed/datamapping/classproperty/OnDuplicateColumnPropertyNames;
}

public abstract class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping {
	public synthetic fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getFctProperty ()Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$Custom : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping {
	public fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;Lcom/huanshankeji/exposed/datamapping/NullableDataMapper;)V
	public final fun getNullableDataMapper ()Lcom/huanshankeji/exposed/datamapping/NullableDataMapper;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping {
	public fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability;Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt;)V
	public final fun getAdt ()Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt;
	public final fun getNullability ()Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability;
}

public abstract class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt {
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt$Product : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt {
	public fun <init> (Ljava/util/List;)V
	public final fun getNestedMappings ()Ljava/util/List;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt$Sum : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Adt {
	public fun <init> (Ljava/util/Map;Lcom/huanshankeji/exposed/datamapping/classproperty/SumTypeCaseConfig;)V
	public final fun getColumnsForAllSubclasses ()Ljava/util/List;
	public final fun getSubclassMap ()Ljava/util/Map;
	public final fun getSumTypeCaseConfig ()Lcom/huanshankeji/exposed/datamapping/classproperty/SumTypeCaseConfig;
}

public abstract class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability {
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability$NonNullable : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability {
	public fun <init> ()V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability$Nullable : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$NestedClass$Nullability {
	public fun <init> (Lorg/jetbrains/exposed/sql/Column;)V
	public final fun getWhetherNullDependentColumn ()Lorg/jetbrains/exposed/sql/Column;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$Skip : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping {
	public fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;)V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping$SqlPrimitive : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMapping {
	public fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeProperty1;Lorg/jetbrains/exposed/sql/Column;)V
	public final fun getColumn ()Lorg/jetbrains/exposed/sql/Column;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig {
	public static final field Companion Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Companion;
	public fun <init> (Lkotlin/reflect/KType;ZLcom/huanshankeji/exposed/datamapping/NullableDataMapper;ZLjava/lang/String;Lorg/jetbrains/exposed/sql/Column;Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt;)V
	public synthetic fun <init> (Lkotlin/reflect/KType;ZLcom/huanshankeji/exposed/datamapping/NullableDataMapper;ZLjava/lang/String;Lorg/jetbrains/exposed/sql/Column;Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getAdt ()Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt;
	public final fun getColumnPropertyName ()Ljava/lang/String;
	public final fun getCustomMapper ()Lcom/huanshankeji/exposed/datamapping/NullableDataMapper;
	public final fun getSkip ()Z
	public final fun getWhetherNullDependentColumn ()Lorg/jetbrains/exposed/sql/Column;
}

public abstract class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt {
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt$Product : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt {
	public fun <init> (Ljava/util/Map;)V
	public final fun getNestedConfigMap ()Ljava/util/Map;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt$Sum : com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt {
	public static final field Companion Lcom/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt$Sum$Companion;
	public fun <init> (Lkotlin/reflect/KClass;Ljava/util/Map;Lcom/huanshankeji/exposed/datamapping/classproperty/SumTypeCaseConfig;)V
	public final fun getSubclassProductConfigMapOverride ()Ljava/util/Map;
	public final fun getSumTypeCaseConfig ()Lcom/huanshankeji/exposed/datamapping/classproperty/SumTypeCaseConfig;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Adt$Sum$Companion {
}

public final class com/huanshankeji/exposed/datamapping/classproperty/PropertyColumnMappingConfig$Companion {
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ReflectionBasedClassPropertyDataMapper : com/huanshankeji/exposed/datamapping/DataMapper {
	public fun <init> (Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeClass;Ljava/util/List;)V
	public final fun getClassPropertyColumnMappings ()Ljava/util/List;
	public final fun getFullConcreteTypeClass ()Lcom/huanshankeji/kotlin/reflect/fullconcretetype/FullConcreteTypeClass;
	public fun getNeededColumns ()Ljava/util/List;
	public fun resultRowToData (Lorg/jetbrains/exposed/sql/ResultRow;)Ljava/lang/Object;
	public fun setUpdateBuilder (Ljava/lang/Object;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
}

public abstract interface class com/huanshankeji/exposed/datamapping/classproperty/ReflectionBasedSimpleClassPropertyDataMapper : com/huanshankeji/exposed/datamapping/SimpleDataMapper {
	public abstract fun getDataPrimaryConstructor ()Lkotlin/reflect/KFunction;
	public abstract fun getPropertyAndColumnPairs ()Ljava/util/List;
	public abstract fun resultRowToData (Lorg/jetbrains/exposed/sql/ResultRow;)Ljava/lang/Object;
	public abstract fun setUpdateBuilder (Ljava/lang/Object;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ReflectionBasedSimpleClassPropertyDataMapper$DefaultImpls {
	public static fun resultRowToData (Lcom/huanshankeji/exposed/datamapping/classproperty/ReflectionBasedSimpleClassPropertyDataMapper;Lorg/jetbrains/exposed/sql/ResultRow;)Ljava/lang/Object;
	public static fun setUpdateBuilder (Lcom/huanshankeji/exposed/datamapping/classproperty/ReflectionBasedSimpleClassPropertyDataMapper;Ljava/lang/Object;Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;)V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ReflectionFunctionInvocationException : java/lang/Exception {
	public fun <init> (Lkotlin/reflect/KFunction;[Ljava/lang/Object;Ljava/lang/Throwable;)V
}

public final class com/huanshankeji/exposed/datamapping/classproperty/ReflectionFunctionInvocationKt {
	public static final fun callWithCatch (Lkotlin/reflect/KFunction;[Ljava/lang/Object;)Ljava/lang/Object;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/SimpleClassPropertyMappingKt {
	public static final fun getColumnProperties (Lkotlin/reflect/KClass;)Lkotlin/sequences/Sequence;
	public static final fun getColumnPropertyByNameMap (Lkotlin/reflect/KClass;)Ljava/util/Map;
	public static final fun getValue (Lorg/jetbrains/exposed/sql/ResultRow;Lorg/jetbrains/exposed/sql/Column;)Ljava/lang/Object;
	public static final fun innerJoinResultRowToData (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Lkotlin/jvm/functions/Function1;
	public static final fun leftJoinResultRowToData (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lorg/jetbrains/exposed/sql/Column;Lorg/jetbrains/exposed/sql/Column;)Lkotlin/jvm/functions/Function1;
	public static final fun leftJoinResultRowToData (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lorg/jetbrains/exposed/sql/Column;)Lkotlin/jvm/functions/Function1;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/SumTypeCaseConfig {
	public fun <init> (Lorg/jetbrains/exposed/sql/Column;Lcom/huanshankeji/BidirectionalConversion;)V
	public final fun getCaseValueColumn ()Lorg/jetbrains/exposed/sql/Column;
	public final fun getCaseValueKClassConversion ()Lcom/huanshankeji/BidirectionalConversion;
}

public final class com/huanshankeji/exposed/datamapping/classproperty/UpdateBuilderKt {
	public static final fun setWithColumnPossiblyBeingEntityId (Lorg/jetbrains/exposed/sql/statements/UpdateBuilder;Lorg/jetbrains/exposed/sql/Column;Ljava/lang/Object;)V
}

